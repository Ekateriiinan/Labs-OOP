#include <gtest/gtest.h>
#include <vector>
#include <string>

std::vector<int> toBinaryArray(unsigned int n);

TEST(ToBinaryArrayTest, ZeroTest) {
    std::vector<int> expected(32, 0);
    EXPECT_EQ(toBinaryArray(0), expected);
}

TEST(ToBinaryArrayTest, OneTest) {
    std::vector<int> expected(32, 0);
    expected[31] = 1;
    EXPECT_EQ(toBinaryArray(1), expected);
}

TEST(ToBinaryArrayTest, FiveTest) {
    std::vector<int> expected(32, 0);
    expected[29] = 1;
    expected[31] = 1;
    EXPECT_EQ(toBinaryArray(5), expected);
}

TEST(ToBinaryArrayTest, MaxUnsignedIntTest) {
    std::vector<int> expected(32, 1);
    EXPECT_EQ(toBinaryArray(4294967295u), expected);
}

TEST(ToBinaryArrayTest, PowerOfTwoTest) {
    std::vector<int> expected(32, 0);
    expected[0] = 1;
    EXPECT_EQ(toBinaryArray(2147483648u), expected);
}

TEST(ToBinaryArrayTest, MixedBitsTest) {
    std::vector<int> expected(32, 0);
    expected[0] = 1;
    expected[16] = 1;
    expected[31] = 1;
    EXPECT_EQ(toBinaryArray(2147483648u + 65536 + 1), expected);
}

TEST(ToBinaryArrayTest, ResultSizeTest) {
    auto result = toBinaryArray(123);
    EXPECT_EQ(result.size(), 32);
}

TEST(ToBinaryArrayTest, AllResultsHaveCorrectSize) {
    unsigned int test_values[] = {0, 1, 5, 100, 1000, 65535, 2147483647};
    
    for (auto value : test_values) {
        auto result = toBinaryArray(value);
        EXPECT_EQ(result.size(), 32);
    }
}

TEST(ToBinaryArrayTest, ConsistencyTest) {
    auto result1 = toBinaryArray(42);
    auto result2 = toBinaryArray(42);
    EXPECT_EQ(result1, result2);
}

TEST(ToBinaryArrayTest, BinaryRepresentationTest) {
    struct TestCase {
        unsigned int input;
        std::vector<int> expected;
    };
    
    std::vector<TestCase> test_cases = {
        {2, [](){ std::vector<int> e(32,0); e[30]=1; return e; }()},
        {8, [](){ std::vector<int> e(32,0); e[28]=1; return e; }()},
        {15, [](){ std::vector<int> e(32,0); e[28]=1; e[29]=1; e[30]=1; e[31]=1; return e; }()},
        {255, [](){ std::vector<int> e(32,0); for(int i=24;i<32;++i)e[i]=1; return e; }()}
    };
    
    for (const auto& test_case : test_cases) {
        EXPECT_EQ(toBinaryArray(test_case.input), test_case.expected);
    }
}
